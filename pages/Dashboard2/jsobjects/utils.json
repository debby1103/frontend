{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "Dashboard2",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tinitialize: () => {\n\t\tstoreValue('docIndex', 0);\n\t\tstoreValue('selectedStatus', '')\n\t},\n\n\tgetDashboardMetrics: async () => {\n\t\tconst allKyc = await getAllKyc.run();\n\n\t\treturn {\n\t\t\tallUserCount: allKyc.length,\n\t\t\tpendingCount: allKyc.filter(k => k.status === 'PENDING').length,\n\t\t\tverifiedCount: allKyc.filter(k => k.status === 'VERIFIED').length,\n\t\t\tblacklistedCount: allKyc.filter(k => k.status === 'BLACKLISTED').length,\n\t\t}\n\t},\n\n\tgetAllKyc: async () => {\n\t\tconst allKyc = await getAllKyc.run();\n\t\tconst fromDate = dat_fromDate.formattedDate || null;\n\t\tconst toDate = dat_toDate.formattedDate || null;\n\n\t\tlet filteredKyc = allKyc;\n\n\t\t// Filter based on date range if fromDate and toDate are provided\n\t\tif (fromDate && toDate) {\n\t\t\tfilteredKyc = filteredKyc.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n\t\t}\n\n\t\t// Filter based on status if sel_status is provided\n\t\tif (sel_status.selectedOptionValue) {\n\t\t\tfilteredKyc = filteredKyc.filter(k => k.status === sel_status.selectedOptionValue);\n\t\t}\n\n\t\t// Map the filtered KYC records to the desired format\n\t\treturn filteredKyc.map(k => ({\n\t\t\tId: k.id,\n\t\t\tFullName: k.first_name + ' ' + k.last_name,\n\t\t\tCreated: new Date(k.created).toDateString(),\n\t\t\tStatus: k.status,\n\t\t\tFirstName: k.first_name,\n\t\t\tLastName: k.last_name,\n\t\t\tEmail: k.email,\n\t\t\tDOB: k.date_of_birth,\n\t\t\tAddress: k.address,\n\t\t\tPhone: k.phone,\n\t\t\tReason: k.reason,\n\t\t\tComment: k.comment,\n\t\t}));\n\t},\n\n\tsetKycDocument: async () => {\n\t\tconst kycDocument = await getKycDocument.run();\n\t\tif (kycDocument) {\n\t\t\tstoreValue('kycDocument', kycDocument);\n\t\t}\n\t},\n\n\tkycStatusColor: (status) => {\n\t\tif (status === 'BLACKLISTED') {\n\t\t\treturn {\n\t\t\t\tstatus: 'BLACKLISTED',\n\t\t\t\tcolor: 'RGB(255, 0, 0)'\n\t\t\t};\n\t\t};\n\t\tif (status === 'REJECTED') {\n\t\t\treturn {\n\t\t\t\tstatus: 'REJECTED',\n\t\t\t\tcolor: 'RGB(255, 0, 0)'\n\t\t\t};\n\t\t}\n\t\tif (status === 'PENDING') {\n\t\t\treturn {\n\t\t\t\tstatus: 'PENDING',\n\t\t\t\tcolor: 'RGB(255, 165, 0)'\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tstatus: 'VERIFIED',\n\t\t\tcolor: 'RGB(0, 128, 0)'\n\t\t};\n\t},\n\n\tlineChartData: () => {\n\t\treturn dailyRegisteredUsersChartData.data.map(d => {\n\t\t\treturn {\n\t\t\t\tx: new Date(d.day).toLocaleDateString().substring(0, 5),\n\t\t\t\ty: d.count,\n\t\t\t}\n\t\t})\n\t},\n\n\tpieChartData: () => {\n\t\tconst counts = {};\n\t\tgetAllKyc.data.forEach((obj) => {\n\t\t\tconst status = obj.status;\n\t\t\tif (!counts[status]) {\n\t\t\t\tcounts[status] = 1;\n\t\t\t} else {\n\t\t\t\tcounts[status]++;\n\t\t\t}\n\t\t});\n\t\tconst result = [];\n\t\tfor (const [status, count] of Object.entries(counts)) {\n\t\t\tresult.push({ x: status, y: count });\n\t\t}\n\t\treturn result;\n\n\t},\n\n\tchartData: () => {\n\n\t\tconst chartIndex = appsmith.store.chartIndex || 0;\n\n\t\tif (chartIndex === 0) {\n\t\t\treturn {\n\t\t\t\tdata: this.lineChartData()\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdata: this.pieChartData()\n\t\t\t}\n\t\t}\n\n\t},\n\n\tdailyRegUsersByStatus: async (status) => {\n\t\tconst data = await dailyRegUsersByStatus.run({status});\n\n\t\treturn data.map(d => {\n\t\t\treturn {\n\t\t\t\tx: new Date(d.date).toLocaleDateString(),\n\t\t\t\ty: d.count,\n\t\t\t}\n\t\t})\n\t},\n\n\tverifiedUsersByMonth: async () => {\n\t\tconst data = await getAllKyc.run();\n\n\t\tconst today = new Date();\n\t\tconst last12Months = new Date(today.getFullYear(), today.getMonth() - 11, 1); // 12 months ago from today\n\t\tconst counts = {};\n\t\tdata.filter(obj => obj.status === 'VERIFIED').forEach(obj => {\n\t\t\tconst createdDate = new Date(obj.created);\n\t\t\tif (createdDate >= last12Months && createdDate <= today) {\n\t\t\t\tconst monthYear = createdDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n\t\t\t\tcounts[monthYear] = (counts[monthYear] || 0) + 1;\n\t\t\t}\n\t\t});\n\t\tconst result = [];\n\t\tlet currentMonth = new Date(last12Months);\n\t\twhile (currentMonth <= today) {\n\t\t\tconst monthYear = currentMonth.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n\t\t\tconst count = counts[monthYear] || 0;\n\t\t\tresult.push({ monthYear, count });\n\t\t\tcurrentMonth.setMonth(currentMonth.getMonth() + 1);\n\t\t}\n\t\treturn result;\n\t},\n\n\taddKycDocument: async () => {\n\t\ttry{\n\t\t\tawait addKycDocument.run();\n\t\t\tawait this.getAllKyc();\n\t\t\tawait this.setKycDocument();\n\t\t\tawait this.returnUserDocumentTypeOptions();\n\t\t\tcloseModal('mdl_uploadFile');\n\t\t\tshowAlert('KYC Entry Created', 'success')\n\t\t}catch(error){\n\t\t\tconsole.log(error);\n\t\t\tshowAlert('Error creating KYC', 'error');\n\t\t}\n\t},\n\n\thandleDocumentSwitch: async (action) => {\n\t\tconst totalDoc = await getKycDocument.run();\n\t\tconst totalDocLength = totalDoc.length;\n\t\tconst prevDocIndex = appsmith.store.docIndex || 0;\n\n\t\tif (action === 'INCREASE') {\n\n\t\t\tif (prevDocIndex == parseInt(totalDocLength) - 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreValue('docIndex', prevDocIndex + 1);\n\t\t} else {\n\t\t\tif (prevDocIndex === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreValue('docIndex', prevDocIndex - 1);\n\t\t}\n\t},\n\n\treturnUserDocumentTypeOptions: async () => {\n\t\t// const userDocumentTypes = getKycDocument.data.forEach(d => d.document_type);\n\t\tconst arr1 = await getKycDocument.run();\n\t\t\n\t\tconst userDocumentTypes = arr1.map(d => d.document_type);\n\t\n\t\tconst allDocumentTypes = [\n\t\t\t'Passport',\n\t\t\t'Drivers license',\n\t\t\t'Utility bill',\n\t\t\t'Phone bill'\n\t\t];\n\n\t\tvar resultArray = [];\n\n\t\tfor (var i = 0; i < allDocumentTypes.length; i++) {\n\t\t\tif (userDocumentTypes.indexOf(allDocumentTypes[i]) === -1) {\n\t\t\t\tresultArray.push(allDocumentTypes[i]);\n\t\t\t}\n\t\t}\n\t\treturn resultArray.map(d => {\n\t\t\treturn {\n\t\t\t\tlabel: d,\n\t\t\t\tvalue: d,\n\t\t\t}\n\t\t});\n\t},\n\n\tswitchChart: (action) => {\n\t\tconst currentChartIndex = appsmith.store.chartIndex || 0;\n\n\t\tif (action === 'RIGHT') {\n\t\t\tif (currentChartIndex === 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstoreValue('chartIndex', currentChartIndex + 1);\n\t\t} else {\n\t\t\tif (currentChartIndex === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstoreValue('chartIndex', currentChartIndex - 1);\n\t\t}\n\t},\n\n\treturnChartType: (chartIndex) => {\n\t\tif (chartIndex === 1) {\n\t\t\treturn 'PIE_CHART';\n\t\t} else {\n\t\t\treturn 'LINE_CHART';\n\t\t}\n\t}\t\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "Dashboard2_utils",
  "deleted": false,
  "gitSyncId": "64ef4d6f6fbfd93d5cd59ce8_64fad27d6fbfd93d5cd5ccfe"
}